---
workflow:
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /no-build/'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /nobuild/'
      when: never
    - if: '$CI_COMMIT_TAG != null'
      variables:
        REPO_DIR: "repo"
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        REPO_DIR: "repo-testing"
    - if: $CI_COMMIT_REF_NAME =~ /experimental/
      variables:
        REPO_DIR: "repo-experimental"
    - when: never

variables:
  # used for build docker images
  BUILDER_VERSION: 1.0.4
  # used for build debian based apt
  DEBIAN_BUILDER_VERSION: 1.0.11
  # used for build ubuntu based apt
  UBUNTU_BUILDER_VERSION: 1.0.6
  # used for build centos based yum
  CENTOS_BUILDER_VERSION: 1.0.5
  # used for glager php-fpm7
  ALPINE_PHP_FPM_VERSION: 1.0.1
  # 
  DEBIAN_BULLSEYE_NET_SNMP_SSL: 1.0.5
  KANIKO_VERSION: 1.14.0

stages:
  - pre-build
  - pkg-build
  - docker-build

.kaniko_build: &kaniko_build
  - sh pre-build/scripts/kaniko-build.sh

.add_ssh_key: &add_ssh_key
  - eval $(ssh-agent -s)
  - echo "${SSH_PRIVATE_KEY_ED25519_BASE64}" | base64 -d | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo 'Host *' > ~/.ssh/config
  - echo '  StrictHostKeyChecking no' >> ~/.ssh/config
  - echo '  UserKnownHostsFile /dev/null' >> ~/.ssh/config
  - chmod 400 ~/.ssh/config

.build_docker: &build_docker
  # github api have some api rate limits for non auth users, so,
  # we need to create PACKER_GITHUB_API_TOKEN secret in gitlab
  # https://developer.hashicorp.com/packer/docs/configure#packer_github_api_token
  # https://github.com/settings/tokens?type=beta (Public Repositories (read-only))
  # this code should work without PACKER_GITHUB_API_TOKEN,
  # but if packer init command failed, you must to set this vaiable in repo secrets
  # - export PACKER_GITHUB_API_TOKEN=${PACKER_GITHUB_API_TOKEN}
  - cd build/appliance/build/docker
  - packer init .
  - packer validate .
  - export DOCKER_PASSWORD=${CI_REGISTRY_PASSWORD}
  - packer build -color=false -timestamp-ui -warn-on-undeclared-var .

.upload_mysql_schema: &upload_mysql_schema
  - cat database/mysql/schema.sql > create.sql
  - cat database/mysql/images.sql >> create.sql
  - cat database/mysql/data.sql >> create.sql
  - tar -czvf create-mysql.sql.tar.gz create.sql
  - curl -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages?per_page=1000" | jq --arg name "mysql" '.[] | select(.name == $name)' | grep $GLABER_VERSION || curl -s --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file "create-mysql.sql.tar.gz" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/mysql/$GLABER_VERSION/create-mysql.sql.tar.gz"
  - rm create.sql create-mysql.sql.tar.gz

.set_glb_version: &set_glb_version
  - export GLABER_VERSION=$(cat include/version.h | grep GLABER_VERSION | tr -dc 0-9.)
  - echo $GLABER_VERSION

.clean_old_dists: &clean_old_dists
  - rm $FULL_PROJECT_PATH/../glaber*.deb || true

.prepare_sources: &prepare_sources
  - *clean_old_dists
  - *set_glb_version
  - ./bootstrap.sh
  - ./configure
  - make dbschema gettext
  - autoreconf -fvi
  - cp -r build/${OS}/${OS_VER}/ debian
  - sed -i "1 s/(.*+/(1:$GLABER_VERSION-${CI_COMMIT_SHORT_SHA}+/g" debian/changelog
  - head -n 5 debian/changelog

.prepare_rpm_sources: &prepare_rpm_sources
  - *set_glb_version
  - ./bootstrap.sh
  - ./configure
  - make dbschema gettext
  - *upload_mysql_schema
  - autoreconf -fvi
  - cd ..
  - cp -r glaber glaber-$GLABER_VERSION
  - tar -czvf glaber-$GLABER_VERSION.tar.gz glaber-$GLABER_VERSION
  - cd ${CI_PROJECT_DIR}
  - cp -r build/${OS}/${OS_VER}/* build/centos
  - mv ../glaber-$GLABER_VERSION.tar.gz build/centos/SOURCES/glaber-$GLABER_VERSION.tar.gz
  - sed -i "2 s/Version:.*/Version:\t$GLABER_VERSION/g" build/centos/SPECS/zabbix.spec

.upload_packages: &upload_packages
  - pwd && ls -al
  - sshpass -p ${SCP_PASS} scp -o StrictHostKeyChecking=no -r ../glaber*.deb ${SCP_USER}@glaber.io:~/$REPO_DIR/${OS}/${OS_VER}
  - sshpass -p ${SCP_PASS} ssh -T ${SCP_USER}@glaber.io  "reprepro --confdir /etc/reprepro/conf --waitforlock 120 --dbdir /var/reprepro/$REPO_DIR --outdir /var/www/glaber.io/$REPO_DIR/${OS}/ includedeb ${OS_VER}  ~/$REPO_DIR/${OS}/${OS_VER}/*.deb"
  - sshpass -p ${SCP_PASS} ssh -T ${SCP_USER}@glaber.io  "rm ~/$REPO_DIR/${OS}/${OS_VER}/*.deb"

.upload_rpms: &upload_rpms
  - echo "Will upload to '$REPO_DIR' repo"
  - sshpass -p ${SCP_PASS} scp -o StrictHostKeyChecking=no -r /root/rpmbuild/RPMS/* ${SCP_USER}@glaber.io:/var/www/glaber.io/$REPO_DIR/rhel/${OS_VER}/RPMS/
  - sshpass -p ${SCP_PASS} ssh -T ${SCP_USER}@glaber.io  "cd /var/www/glaber.io/$REPO_DIR/rhel/${OS_VER} && createrepo ."

# template for the pre-build stage with kaniko build
.base-pre-builder:
  stage: pre-build
  image:
    name: gcr.io/kaniko-project/executor:v${KANIKO_VERSION}-debug
    entrypoint: [""]
  variables:
    BUILD_IMG: "${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}"
    CACHE_REPO: "${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}-cache"
    BUILD_DIR_BASE: "${CI_PROJECT_DIR}/pre-build/${OS}"
    BUILD_DIR: "${BUILD_DIR_BASE}/${BUILD_DIR_SUFFIX}"
  script:
    - *kaniko_build
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /pre-build/

# template for the debian based pkg-build stage
.base-debian-builder:
  stage: pkg-build
  script:
    - export FULL_PROJECT_PATH=$PWD
    - *prepare_sources
    - dpkg-buildpackage -b --no-sign
    - *upload_packages
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

# template for the centos based pkg-build stage
.base-centos-builder:
  stage: pkg-build
  script:
    - rm -rf /root/rpmbuild/BUILD/*
    - export FULL_PROJECT_PATH=$PWD
    - *prepare_rpm_sources
    - cd build/centos
    - yum-builddep -y SPECS/zabbix.spec
    - rpmbuild -bb SPECS/zabbix.spec --define "_sourcedir $PWD/SOURCES" --define "glaber_version $GLABER_VERSION"
    - *upload_rpms
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

# build for the main glaber package
astra:
  stage: pkg-build
  variables:
    OS: astra
    OS_VER: 1.7.3
  tags: ["virtbox"]
  script:
    - update-ca-certificates
    - *prepare_sources
    - dpkg-buildpackage -b --no-sign
    - *upload_packages
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

centos-8:
  extends: .base-centos-builder
  variables:
    OS: almalinux
    OS_VER: 8
  image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${CENTOS_BUILDER_VERSION}

# after spec folder created build/almalinux/9
# centos-9:
#   extends: .base-centos-builder
#   variables:
#     OS: almalinux
#     OS_VER: 9
#   image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${CENTOS_BUILDER_VERSION}

debian-buster:
  extends: .base-debian-builder
  variables:
    OS: debian
    OS_VER: buster
  image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${DEBIAN_BUILDER_VERSION}

debian-bullseye:
  extends: .base-debian-builder
  variables:
    OS: debian
    OS_VER: bullseye
  image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${DEBIAN_BUILDER_VERSION}

# after spec folder created /build/debian/bookworm
# debian-bookworm:
#   extends: .base-debian-builder
#   variables:
#     OS: debian
#     OS_VER: bookworm
#   image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${DEBIAN_BUILDER_VERSION}

ubuntu-focal:
  extends: .base-debian-builder
  variables:
    OS: ubuntu
    OS_VER: focal
  image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${UBUNTU_BUILDER_VERSION}

ubuntu-bionic:
  extends: .base-debian-builder
  variables:
    OS: ubuntu
    OS_VER: bionic
  image: ${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${UBUNTU_BUILDER_VERSION}

# build for the docker packages
docker-debian-bullseye:
  stage: docker-build
  image: ${CI_REGISTRY_IMAGE}/builder:${BUILDER_VERSION}
  before_script:
    - *add_ssh_key
  script:
    - bash pre-build/scripts/manage-vm.sh start
    - *set_glb_version
    - *build_docker
    - docker rmi -f $(docker images ${CI_REGISTRY_IMAGE}/glaber-server -q)
    - docker rmi -f $(docker images ${CI_REGISTRY_IMAGE}/glaber-nginx -q)
    - bash pre-build/scripts/manage-vm.sh stop
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

# build for the support pre-build docker images
almalinux-8-builder:
  extends: .base-pre-builder
  variables:
    OS: almalinux
    OS_VER: 8
    BUILD_TAG: ${CENTOS_BUILDER_VERSION}

almalinux-9-builder:
  extends: .base-pre-builder
  variables:
    OS: almalinux
    OS_VER: 9
    BUILD_TAG: ${CENTOS_BUILDER_VERSION}

debian-buster-builder:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: buster
    BUILD_TAG: ${DEBIAN_BUILDER_VERSION}

debian-bullseye-builder:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: bullseye
    BUILD_TAG: ${DEBIAN_BUILDER_VERSION}

debian-bookworm-builder:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: bookworm
    BUILD_TAG: ${DEBIAN_BUILDER_VERSION}

ubuntu-bionic-builder:
  extends: .base-pre-builder
  variables:
    OS: ubuntu
    OS_VER: bionic
    BUILD_TAG: ${UBUNTU_BUILDER_VERSION}

ubuntu-focal-builder:
  extends: .base-pre-builder
  variables:
    OS: ubuntu
    OS_VER: focal
    BUILD_TAG: ${UBUNTU_BUILDER_VERSION}

# build for the other support docker images (docker builder,php-fpm, etc)
alpine-php-fpm-8:
  extends: .base-pre-builder
  variables:
    OS: alpine
    OS_VER: "3.15"
    BUILD_DIR_SUFFIX: "php-fpm-8"
    BUILD_TAG: ${ALPINE_PHP_FPM_VERSION}

builder:
  extends: .base-pre-builder
  variables:
    OS: alpine
    OS_VER: "3.17"
    BUILD_DIR_SUFFIX: "builder"
    BUILD_TAG: "${BUILDER_VERSION}"

debian-bullseye-net-snmp-ssl:
  extends: .base-pre-builder
  tags: ["kaniko"]
  variables:
    OS: debian
    OS_VER: bullseye
    BUILD_DIR_SUFFIX: "net-snmp-ssl"
    BUILD_TAG: ${DEBIAN_BULLSEYE_NET_SNMP_SSL}
