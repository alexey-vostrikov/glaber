---
workflow:
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /no-build/'
      when: never
    - if: '$CI_COMMIT_MESSAGE =~ /nobuild/'
      when: never
    - if: '$CI_COMMIT_TAG != null'
      variables:
        REPO_DIR: "repo"
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        REPO_DIR: "repo-testing"
    - if: $CI_COMMIT_REF_NAME =~ /experimental/
      variables:
        REPO_DIR: "repo-experimental"
    - when: never

variables:
  # used for a build docker images
  BUILDER_VERSION: 1.0.8
  # used for build debian based apt
  DEBIAN_BUILDER_VERSION: 1.0.13
  # used for build ubuntu based apt
  UBUNTU_BUILDER_VERSION: 1.0.9
  # used for build centos based yum
  CENTOS_BUILDER_VERSION: 1.0.7
  # used for glager php-fpm7
  ALPINE_PHP_FPM_VERSION: 1.0.1
  # 
  DEBIAN_BULLSEYE_NET_SNMP_SSL: 1.0.6

stages:
  - pre-build
  - pkg-build
  - docker-build

.add_ssh_key: &add_ssh_key
  - eval $(ssh-agent -s)
  - echo "${SSH_PRIVATE_KEY_GLABERIO_BASE64}" | base64 -d | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo 'Host *' > ~/.ssh/config
  - echo '  StrictHostKeyChecking no' >> ~/.ssh/config
  - echo '  UserKnownHostsFile /dev/null' >> ~/.ssh/config
  - chmod 400 ~/.ssh/config

.build_docker: &build_docker
  # github api have some api rate limits for non auth users, so,
  # we need to create PACKER_GITHUB_API_TOKEN secret in gitlab
  # https://developer.hashicorp.com/packer/docs/configure#packer_github_api_token
  # https://github.com/settings/tokens?type=beta (Public Repositories (read-only))
  # this code should work without PACKER_GITHUB_API_TOKEN,
  # but if packer init command failed, you must to set this vaiable in repo secrets
  # - export PACKER_GITHUB_API_TOKEN=${PACKER_GITHUB_API_TOKEN}
  - cd build/appliance/build/docker
  - packer init .
  - packer validate .
  - export DOCKER_PASSWORD=${CI_REGISTRY_PASSWORD}
  - packer build -color=false -timestamp-ui -warn-on-undeclared-var .
  - docker rmi -f $(docker images ${CI_REGISTRY_IMAGE}/glaber-server -q)
  - docker rmi -f $(docker images ${CI_REGISTRY_IMAGE}/glaber-nginx -q)

.upload_mysql_schema: &upload_mysql_schema
  - cat database/mysql/schema.sql > create.sql
  - cat database/mysql/images.sql >> create.sql
  - cat database/mysql/data.sql >> create.sql
  - tar -czvf create-mysql.sql.tar.gz create.sql
  - curl -s "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages?per_page=1000" | jq --arg name "mysql" '.[] | select(.name == $name)' | grep $GLABER_VERSION || curl -s --header "JOB-TOKEN:$CI_JOB_TOKEN" --upload-file "create-mysql.sql.tar.gz" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/packages/generic/mysql/$GLABER_VERSION/create-mysql.sql.tar.gz"
  - rm create.sql create-mysql.sql.tar.gz

.set_glb_version: &set_glb_version
  - export GLABER_VERSION=$(cat include/version.h | grep GLABER_VERSION | tr -dc 0-9.)
  - echo $GLABER_VERSION

.prepare_sources: &prepare_sources
  - *set_glb_version
  - ./bootstrap.sh
  - ./configure
  - make dbschema gettext
  - autoreconf -fvi
  - cp -r build/${OS}/${OS_VER}/ debian
  - sed -i "1 s/(.*+/(1:$GLABER_VERSION-${CI_COMMIT_SHORT_SHA}+/g" debian/changelog
  - head -n 5 debian/changelog

.prepare_rpm_sources: &prepare_rpm_sources
  - *set_glb_version
  - ./bootstrap.sh
  - ./configure
  - make dbschema gettext
  - *upload_mysql_schema
  - autoreconf -fvi
  - cp -r ../glaber ../glaber-$GLABER_VERSION
  - tar -czvf ../glaber-$GLABER_VERSION.tar.gz ../glaber-$GLABER_VERSION
  - cp -r build/${OS}/${OS_VER}/* build/centos
  - mv ../glaber-$GLABER_VERSION.tar.gz build/centos/SOURCES/glaber-$GLABER_VERSION.tar.gz
  - sed -i "2 s/Version:.*/Version:\t$GLABER_VERSION/g" build/centos/SPECS/zabbix.spec

.upload_packages: &upload_packages
  - echo "Will upload to '$REPO_DIR' repo"
  - *add_ssh_key
  - scp -r debbuild/glaber*.deb ${SCP_USER}@glaber.io:~/$REPO_DIR/${OS}/${OS_VER}
  - ssh -T ${SCP_USER}@glaber.io  "reprepro --confdir /etc/reprepro/conf --waitforlock 120 --dbdir /var/reprepro/$REPO_DIR --outdir /var/www/glaber.io/$REPO_DIR/${OS}/ includedeb ${OS_VER}  ~/$REPO_DIR/${OS}/${OS_VER}/*.deb"
  - ssh -T ${SCP_USER}@glaber.io  "rm ~/$REPO_DIR/${OS}/${OS_VER}/*.deb"

.upload_rpms: &upload_rpms
  - echo "Will upload to '$REPO_DIR' repo"
  - *add_ssh_key
  - scp -r rpmbuild/RPMS/* ${SCP_USER}@glaber.io:/var/www/glaber.io/$REPO_DIR/rhel/${OS_VER}/RPMS/
  - ssh -T ${SCP_USER}@glaber.io  "cd /var/www/glaber.io/$REPO_DIR/rhel/${OS_VER} && createrepo ."

# template for the pre-build stage with docker build
.base-pre-builder:
  stage: pre-build
  image: ${CI_REGISTRY_IMAGE}/builder:1.0.8
  variables:
    BUILD_IMG: "${CI_REGISTRY_IMAGE}/${CI_JOB_NAME}"
    BUILD_DIR_BASE: "${CI_PROJECT_DIR}/pre-build/${OS}"
    BUILD_DIR: "${BUILD_DIR_BASE}/${BUILD_DIR_SUFFIX}"
    DOCKER_BUILDKIT: 1
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker images --format '{{.Repository}}:{{.Tag}}' | grep ${BUILD_IMG}:${BUILD_TAG} && echo "${BUILD_IMG}:${BUILD_TAG} already exist, skipping the build" && exit 0
    - docker build ${BUILD_DIR} --build-arg OS=${OS} --build-arg OS_VER=${OS_VER} -t ${BUILD_IMG}:${BUILD_TAG}
    - echo ${CI_JOB_NAME} | grep -v "\-builder" && docker push ${BUILD_IMG}:${BUILD_TAG} || true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /pre-build/

# template for the debian based pkg-build stage
.base-debian-builder:
  variables:
    CCACHE_DIR: "/cache/.ccache/${CI_JOB_NAME}"
    CC: "ccache x86_64-linux-gnu-gcc"
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - /cache/.ccache/${CI_JOB_NAME}/
  before_script:
    - ccache -z # Clear the statistics
    - mkdir debbuild
  after_script:
    - ccache -s # Show ccache statistics
  stage: pkg-build
  image: "${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${PRE_BUILDER_VERSION}"
  script:
    - *prepare_sources
    - dpkg-buildpackage -b --no-sign
    - mv ../glaber*.deb debbuild/
    - *upload_packages
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

# template for the centos based pkg-build stage
.base-centos-builder:
  variables:
    CCACHE_DIR: "/cache/.ccache/${CI_JOB_NAME}"
    CC: "ccache cc"
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths:
      - /cache/.ccache/${CI_JOB_NAME}/
  before_script:
    - ccache -z # Clear the statistics
    - mkdir rpmbuild
  after_script:
    - ccache -s # Show ccache statistics
  stage: pkg-build
  image: "${CI_REGISTRY_IMAGE}/${OS}-${OS_VER}-builder:${PRE_BUILDER_VERSION}"
  script:
    - *prepare_rpm_sources
    - cd build/centos
    - yum-builddep -y SPECS/zabbix.spec
    - rpmbuild -bb SPECS/zabbix.spec --define "_sourcedir $PWD/SOURCES" --define "glaber_version $GLABER_VERSION" --define "_topdir $CI_PROJECT_DIR/rpmbuild"
    - cd $CI_PROJECT_DIR
    - *upload_rpms
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

# build for the main glaber package
astra:
  stage: pkg-build
  variables:
    OS: astra
    OS_VER: 1.7.3
  tags: ["virtbox"]
  hooks: 
    pre_get_sources_script: 
      - update-ca-certificates
  before_script:
    - mkdir debbuild
  script:
    - *prepare_sources
    - dpkg-buildpackage -b --no-sign
    - mv ../glaber*.deb debbuild/
    - *upload_packages
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

centos-8:
  extends: .base-centos-builder
  variables:
    OS: almalinux
    OS_VER: 8
    PRE_BUILDER_VERSION: ${CENTOS_BUILDER_VERSION}

# after spec folder created build/almalinux/9
centos-9:
  extends: .base-centos-builder
  variables:
    OS: almalinux
    OS_VER: 9
    PRE_BUILDER_VERSION: ${CENTOS_BUILDER_VERSION}

debian-buster:
  extends: .base-debian-builder
  variables:
    OS: debian
    OS_VER: buster
    PRE_BUILDER_VERSION: ${DEBIAN_BUILDER_VERSION}

debian-bullseye:
  extends: .base-debian-builder
  variables:
    OS: debian
    OS_VER: bullseye
    PRE_BUILDER_VERSION: ${DEBIAN_BUILDER_VERSION}

debian-bookworm:
  extends: .base-debian-builder
  variables:
    OS: debian
    OS_VER: bookworm
    PRE_BUILDER_VERSION: ${DEBIAN_BUILDER_VERSION}

ubuntu-focal:
  extends: .base-debian-builder
  variables:
    OS: ubuntu
    OS_VER: focal
    PRE_BUILDER_VERSION: ${UBUNTU_BUILDER_VERSION}

ubuntu-bionic:
  extends: .base-debian-builder
  variables:
    OS: ubuntu
    OS_VER: bionic
    PRE_BUILDER_VERSION: ${UBUNTU_BUILDER_VERSION}

ubuntu-jammy:
  extends: .base-debian-builder
  variables:
    OS: ubuntu
    OS_VER: jammy
    PRE_BUILDER_VERSION: ${UBUNTU_BUILDER_VERSION}

# build for the docker packages
docker-debian-bullseye:
  stage: docker-build
  image: ${CI_REGISTRY_IMAGE}/builder:${BUILDER_VERSION}
  script:
    - *set_glb_version
    - *build_docker
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /pre-build/

# build for the support pre-build docker images
almalinux-8-builder:
  extends: .base-pre-builder
  variables:
    OS: almalinux
    OS_VER: 8
    BUILD_TAG: ${CENTOS_BUILDER_VERSION}

almalinux-9-builder:
  extends: .base-pre-builder
  variables:
    OS: almalinux
    OS_VER: 9
    BUILD_TAG: ${CENTOS_BUILDER_VERSION}

debian-buster-builder:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: buster
    BUILD_TAG: ${DEBIAN_BUILDER_VERSION}

debian-bullseye-builder:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: bullseye
    BUILD_TAG: ${DEBIAN_BUILDER_VERSION}

debian-bookworm-builder:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: bookworm
    BUILD_TAG: ${DEBIAN_BUILDER_VERSION}

ubuntu-bionic-builder:
  extends: .base-pre-builder
  variables:
    OS: ubuntu
    OS_VER: bionic
    BUILD_TAG: ${UBUNTU_BUILDER_VERSION}

ubuntu-focal-builder:
  extends: .base-pre-builder
  variables:
    OS: ubuntu
    OS_VER: focal
    BUILD_TAG: ${UBUNTU_BUILDER_VERSION}

ubuntu-jammy-builder:
  extends: .base-pre-builder
  variables:
    OS: ubuntu
    OS_VER: jammy
    BUILD_TAG: ${UBUNTU_BUILDER_VERSION}

# build for the other support docker images (docker builder,php-fpm, etc)
alpine-php-fpm-8:
  extends: .base-pre-builder
  variables:
    OS: alpine
    OS_VER: "3.15"
    BUILD_DIR_SUFFIX: "php-fpm-8"
    BUILD_TAG: ${ALPINE_PHP_FPM_VERSION}

builder:
  extends: .base-pre-builder
  variables:
    OS: alpine
    OS_VER: "3.18"
    BUILD_DIR_SUFFIX: "builder"
    BUILD_TAG: "${BUILDER_VERSION}"

debian-bullseye-net-snmp-ssl:
  extends: .base-pre-builder
  variables:
    OS: debian
    OS_VER: bullseye
    BUILD_DIR_SUFFIX: "net-snmp-ssl"
    BUILD_TAG: ${DEBIAN_BULLSEYE_NET_SNMP_SSL}
