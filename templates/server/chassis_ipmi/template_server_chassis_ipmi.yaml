zabbix_export:
  version: '5.2'
  date: '2020-10-16T09:33:40Z'
  groups:
    -
      name: 'Templates/Server hardware'
  templates:
    -
      template: 'Chassis by IPMI'
      name: 'Chassis by IPMI'
      description: |
        Template for monitoring servers with BMC over IPMI that work without any external scripts. 
        All metrics are collected at once, thanks to Zabbix's bulk data collection. The template is available starting from Zabbix version 5.0. 
        It collects metrics by polling BMC remotely using an IPMI agent.
        
        
        Known Issues:
        
          Description: If the BMC has a sensor with an empty threshold value, we get the LLD error "Cannot create trigger...".
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/398023-discussion-thread-for-official-zabbix-template-ipmi
        
        Template tooling version used: 0.38
      groups:
        -
          name: 'Templates/Server hardware'
      applications:
        -
          name: General
        -
          name: 'Zabbix raw items'
      items:
        -
          name: 'Get IPMI sensors'
          type: IPMI
          key: ipmi.get
          history: '0'
          trends: '0'
          value_type: TEXT
          description: 'The master item that receives all sensors with values for LLD and dependent elements from BMC.'
          applications:
            -
              name: 'Zabbix raw items'
      discovery_rules:
        -
          name: 'Discrete sensors discovery'
          type: DEPENDENT
          key: ipmi.discrete.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR_READING_TYPE}'
                value: threshold
                operator: NOT_MATCHES_REGEX
                formulaid: A
              -
                macro: '{#SENSOR_TYPE}'
                value: '{$IPMI.SENSOR_TYPE.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR_TYPE}'
                value: '{$IPMI.SENSOR_TYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
          description: 'Discovery of the discrete IPMI sensors.'
          item_prototypes:
            -
              name: 'IPMI: {#SENSOR_ID}'
              type: DEPENDENT
              key: 'ipmi.state_text[{#SENSOR_ID}]'
              delay: '0'
              history: 7d
              trends: '0'
              value_type: CHAR
              description: 'It is a state of the discrete IPMI sensor.'
              application_prototypes:
                -
                  name: 'IPMI {#SENSOR_TYPE}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.[?(@.id==''{#SENSOR_ID}'')].state.text.first()'
                -
                  type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1d
              master_item:
                key: ipmi.get
              trigger_prototypes:
                -
                  expression: '{diff()}=1'
                  name: 'IPMI: {#SENSOR_ID} value has changed'
                  priority: INFO
                  description: 'The trigger is informing about changes in a state of the discrete IPMI sensor. A problem generated by this trigger can be manually closed.'
                  manual_close: 'YES'
          master_item:
            key: ipmi.get
          lld_macro_paths:
            -
              lld_macro: '{#SENSOR_ID}'
              path: $.id
            -
              lld_macro: '{#SENSOR_READING_TYPE}'
              path: $.reading.text
            -
              lld_macro: '{#SENSOR_TYPE}'
              path: $.sensor.text
            -
              lld_macro: '{#SENSOR_UNIT}'
              path: $.units
        -
          name: 'Threshold sensors discovery'
          type: DEPENDENT
          key: ipmi.sensors.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR_READING_TYPE}'
                value: threshold
                formulaid: A
              -
                macro: '{#SENSOR_TYPE}'
                value: '{$IPMI.SENSOR_TYPE.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR_TYPE}'
                value: '{$IPMI.SENSOR_TYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
          description: 'Discovery of the threshold IPMI sensors.'
          item_prototypes:
            -
              name: 'IPMI: {#SENSOR_ID}, {#SENSOR_UNIT}'
              type: DEPENDENT
              key: 'ipmi.value[{#SENSOR_ID}]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              description: 'It is a state of the threshold IPMI sensor.'
              application_prototypes:
                -
                  name: 'IPMI {#SENSOR_TYPE}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$.[?(@.id==''{#SENSOR_ID}'')].value.first()'
                -
                  type: DISCARD_UNCHANGED_HEARTBEAT
                  parameters:
                    - 1h
              master_item:
                key: ipmi.get
              trigger_prototypes:
                -
                  expression: '{min(5m)}>{#SENSOR_HI_CRIT}'
                  name: 'IPMI: {#SENSOR_ID} value is above critical high (greater than {#SENSOR_HI_CRIT} for 5m)'
                  priority: HIGH
                  description: 'The trigger is informing that a value higher than the upper critical threshold has been reached.'
                  dependencies:
                    -
                      name: 'IPMI: {#SENSOR_ID} value is above non-recoverable high (greater than {#SENSOR_HI_DISAST} for 5m)'
                      expression: '{Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}>{#SENSOR_HI_DISAST}'
                -
                  expression: '{min(5m)}>{#SENSOR_HI_WARN}'
                  name: 'IPMI: {#SENSOR_ID} value is above non-critical high (greater than {#SENSOR_HI_WARN} for 5m)'
                  priority: WARNING
                  description: 'The trigger is informing that a value higher than the upper non-critical threshold has been reached.'
                  dependencies:
                    -
                      name: 'IPMI: {#SENSOR_ID} value is above critical high (greater than {#SENSOR_HI_CRIT} for 5m)'
                      expression: '{Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}>{#SENSOR_HI_CRIT}'
                    -
                      name: 'IPMI: {#SENSOR_ID} value is above non-recoverable high (greater than {#SENSOR_HI_DISAST} for 5m)'
                      expression: '{Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}>{#SENSOR_HI_DISAST}'
                -
                  expression: '{min(5m)}>{#SENSOR_HI_DISAST}'
                  name: 'IPMI: {#SENSOR_ID} value is above non-recoverable high (greater than {#SENSOR_HI_DISAST} for 5m)'
                  priority: DISASTER
                  description: 'The trigger is informing that a value higher than the upper non-recoverable threshold has been reached.'
                -
                  expression: '{min(5m)}<{#SENSOR_LO_CRIT}'
                  name: 'IPMI: {#SENSOR_ID} value is below critical low (less than {#SENSOR_LO_CRIT} for 5m)'
                  priority: HIGH
                  description: 'The trigger is informing that a value less than the lower critical threshold has been reached.'
                  dependencies:
                    -
                      name: 'IPMI: {#SENSOR_ID} value is below non-recoverable low (less than {#SENSOR_LO_DISAST} for 5m)'
                      expression: '{Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}<{#SENSOR_LO_DISAST}'
                -
                  expression: '{min(5m)}<{#SENSOR_LO_WARN}'
                  name: 'IPMI: {#SENSOR_ID} value is below non-critical low (less than {#SENSOR_LO_WARN} for 5m)'
                  priority: WARNING
                  description: 'The trigger is informing that a value less than the lower non-critical threshold has been reached.'
                  dependencies:
                    -
                      name: 'IPMI: {#SENSOR_ID} value is below critical low (less than {#SENSOR_LO_CRIT} for 5m)'
                      expression: '{Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}<{#SENSOR_LO_CRIT}'
                    -
                      name: 'IPMI: {#SENSOR_ID} value is below non-recoverable low (less than {#SENSOR_LO_DISAST} for 5m)'
                      expression: '{Chassis by IPMI:ipmi.value[{#SENSOR_ID}].min(5m)}<{#SENSOR_LO_DISAST}'
                -
                  expression: '{min(5m)}<{#SENSOR_LO_DISAST}'
                  name: 'IPMI: {#SENSOR_ID} value is below non-recoverable low (less than {#SENSOR_LO_DISAST} for 5m)'
                  priority: DISASTER
                  description: 'The trigger is informing that a value less than the lower non-recoverable threshold has been reached.'
          graph_prototypes:
            -
              name: 'IPMI: {#SENSOR_ID}'
              graph_items:
                -
                  color: 1A7C11
                  item:
                    host: 'Chassis by IPMI'
                    key: 'ipmi.value[{#SENSOR_ID}]'
          master_item:
            key: ipmi.get
          lld_macro_paths:
            -
              lld_macro: '{#SENSOR_HI_CRIT}'
              path: $.threshold.upper.crit
            -
              lld_macro: '{#SENSOR_HI_DISAST}'
              path: $.threshold.upper.non_recover
            -
              lld_macro: '{#SENSOR_HI_WARN}'
              path: $.threshold.upper.non_crit
            -
              lld_macro: '{#SENSOR_ID}'
              path: $.id
            -
              lld_macro: '{#SENSOR_LO_CRIT}'
              path: $.threshold.lower.crit
            -
              lld_macro: '{#SENSOR_LO_DISAST}'
              path: $.threshold.lower.non_recover
            -
              lld_macro: '{#SENSOR_LO_WARN}'
              path: $.threshold.lower.non_crit
            -
              lld_macro: '{#SENSOR_READING_TYPE}'
              path: $.reading.text
            -
              lld_macro: '{#SENSOR_TYPE}'
              path: $.sensor.text
            -
              lld_macro: '{#SENSOR_UNIT}'
              path: $.units
          overrides:
            -
              name: 'trigger SENSOR_HI_CRIT'
              step: '5'
              operations:
                -
                  operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: '{#SENSOR_HI_CRIT}'
                  status: ENABLED
                  discover: NO_DISCOVER
            -
              name: 'trigger SENSOR_HI_DISAST'
              step: '6'
              operations:
                -
                  operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: '{#SENSOR_HI_DISAST}'
                  status: ENABLED
                  discover: NO_DISCOVER
            -
              name: 'trigger SENSOR_HI_WARN'
              step: '4'
              operations:
                -
                  operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: '{#SENSOR_HI_WARN}'
                  status: ENABLED
                  discover: NO_DISCOVER
            -
              name: 'trigger SENSOR_LO_CRIT'
              step: '2'
              operations:
                -
                  operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: '{#SENSOR_LO_CRIT}'
                  status: ENABLED
                  discover: NO_DISCOVER
            -
              name: 'trigger SENSOR_LO_DISAST'
              step: '3'
              operations:
                -
                  operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: '{#SENSOR_LO_DISAST}'
                  status: ENABLED
                  discover: NO_DISCOVER
            -
              name: 'trigger SENSOR_LO_WARN'
              step: '1'
              operations:
                -
                  operationobject: TRIGGER_PROTOTYPE
                  operator: LIKE
                  value: '{#SENSOR_LO_WARN}'
                  status: ENABLED
                  discover: NO_DISCOVER
      macros:
        -
          macro: '{$IPMI.PASSWORD}'
          description: 'This macro is used for access to BMC. It can be overridden on the host or linked template level.'
        -
          macro: '{$IPMI.SENSOR_TYPE.MATCHES}'
          value: '.*'
          description: 'This macro is used in sensors discovery. It can be overridden on the host or linked template level.'
        -
          macro: '{$IPMI.SENSOR_TYPE.NOT_MATCHES}'
          value: invalid
          description: 'This macro is used in sensors discovery. It can be overridden on the host or linked template level.'
        -
          macro: '{$IPMI.USER}'
          description: 'This macro is used for access to BMC. It can be overridden on the host or linked template level.'
