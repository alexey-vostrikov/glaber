zabbix_export:
  version: '5.2'
  date: '2020-11-16T20:10:41Z'
  groups:
    -
      name: Templates/Applications
  templates:
    -
      template: 'Aranet Cloud'
      name: 'Aranet Cloud'
      description: 'Template tooling version used: 0.38'
      groups:
        -
          name: Templates/Applications
      applications:
        -
          name: Aranet
        -
          name: 'Zabbix raw items'
      items:
        -
          name: 'Aranet: Get data'
          type: SCRIPT
          key: aranet.get_data
          history: '0'
          trends: '0'
          value_type: TEXT
          params: |
            var Aranet = {
                params: {},
                auth_token: null,
                refresh_token: null,
                space_id: null,
            
                setParams: function (params) {
                    ['api_endpoint', 'username', 'password', 'space_name'].forEach(function (field) {
                        if (typeof params !== 'object' || typeof params[field] === 'undefined'
                                || params[field] === '') {
                            throw 'Required param is not set: "' + field + '".';
                        }
                    });
            
                    Aranet.params = params;
                    if (typeof Aranet.params.api_endpoint === 'string') {
                        if (!Aranet.params.api_endpoint.endsWith('/')) {
                            Aranet.params.api_endpoint += '/';
                        }
                    }
                },
            
                request: function (method, query, data) {
                    var response,
                        request = new CurlHttpRequest(),
                        url = Aranet.params.api_endpoint + query;
            
                    request.AddHeader('Content-Type: application/json');
            
                    if (Aranet.auth_token !== null) {
                        request.AddHeader('Authorization: Bearer ' + Aranet.auth_token);
                    }
            
                    if (typeof data !== 'undefined') {
                        data = JSON.stringify(data);
                    }
            
                    switch (method) {
                        case 'get':
                            response = request.Get(url, data);
                            break;
            
                        case 'post':
                            response = request.Post(url, data);
                            break;
            
                        default:
                            throw 'Unsupported HTTP request method: ' + method;
                    }
            
                    Zabbix.Log(4, '[ Aranet scraper ] Received response with status code ' + request.Status() + ': ' + response);
            
                    if (request.Status() < 200 || request.Status() >= 300) {
                        var message = 'Request failed with status code ' + request.Status();
            
                        message += ': ' + response;
                        throw message;
                    }
            
                    if (response !== null) {
                        try {
                            response = JSON.parse(response);
                        }
                        catch (error) {
                            throw 'Failed to parse response received from Aranet Cloud. Check debug log for more information.';
                        }
                    }
            
                    return {
                        status: request.Status(),
                        response: response
                    };
                },
            
                login: function () {
                    var result,
                        data = {
                            login: Aranet.params.username,
                            passw: Aranet.params.password
                        };
            
                    result = Aranet.request('post', 'user/login', data);
                    if (typeof result.response !== 'object'
                            || typeof result.response.auth === 'undefined'
                            || result.status != 200) {
                        throw 'Cannot login to Aranet Cloud. Check debug log for more information.';
                    }
            
                    Aranet.auth_token = result.response.auth;
                    Aranet.refresh_token = result.response.refresh;
            
                    var spaces = result.response.spaces;
                    for (var key in spaces) {
                        if (spaces[key] == Aranet.params.space_name) {
                            Aranet.space_id = key;
                            break;
                        }
                    }
            
                    return result.response;
                },
            
                logout: function () {
                    var result,
                        data = {
                            refresh: Aranet.refresh_token
                        };
            
                    try {
                        result = Aranet.request('post', 'user/logout', data);
                        if (result.status != 204) {
                            throw 'Cannot logout from Aranet Cloud ' + request.Status() + ': ' + result.response;
                        }
                    }
                    catch (error) {
                        Zabbix.Log(4, '[ Aranet scraper ] ' + error)
                    }
                },
            
                getMetrics: function () {
                    var result = Aranet.request('get', 'metrics/' + Aranet.space_id);
            
                    if (typeof result.response !== 'object'
                            || typeof result.response.data === 'undefined'
                            || result.status != 200) {
                        throw 'Cannot get metrics data from Aranet Cloud. Check debug log for more information.';
                    };
            
                    return result.response;
                },
            
                getSensors: function () {
                    var result = Aranet.request('get', 'sensors/' + Aranet.space_id + '?fields=metrics,telemetry,name');
            
                    if (typeof result.response !== 'object'
                            || typeof result.response.data === 'undefined'
                            || result.status != 200) {
                        throw 'Cannot get sensors data from Aranet Cloud. Check debug log for more information.';
                    };
            
                    return result.response;
                }
            }
            
            var processed_metrics = {},
                processed_sensors = [];
            
            try {
                Aranet.setParams(JSON.parse(value));
            
                Aranet.login();
            
                var raw_metrics = Aranet.getMetrics(),
                    raw_sensors = Aranet.getSensors();
                
                Aranet.logout();
            
                raw_metrics.data.items.forEach(function (item) {
                    var unit_name;
            
                    item.units.some(function (unit) {
                        unit_name = unit.name;
                        if (unit.selected) {
                            return true;
                        }
                    });
            
                    processed_metrics[item.id] = {
                        name: item.name,
                        unit: unit_name
                    }
                });
            
                raw_sensors.data.items.forEach(function (item) {
                    var sensor_metrics = [];
            
                    item.metrics.forEach(function (metric) {
                        var unit = processed_metrics[metric.id];
            
                        sensor_metrics.push({
                            name: unit.name,
                            unit: unit.unit,
                            value: metric.v
                        });
                    });
            
                    item.telemetry.forEach(function (tel) {
                        var unit = processed_metrics[tel.id];
            
                        sensor_metrics.push({
                            name: unit.name,
                            unit: unit.unit,
                            value: tel.v
                        });
                    });
            
                    processed_sensors.push({
                        id: item.id,
                        name: item.name,
                        metrics: sensor_metrics
                    });
                });
            
                return JSON.stringify(processed_sensors);
            }
            catch (error) {
                Zabbix.Log(3, '[ Aranet scraper ] ERROR: ' + error);
                throw 'Scraping failed: ' + error;
            }
          applications:
            -
              name: 'Zabbix raw items'
          timeout: 10s
          parameters:
            -
              name: password
              value: '{$ARANET.API.PASSWORD}'
            -
              name: space_name
              value: '{$ARANET.API.SPACE_NAME}'
            -
              name: username
              value: '{$ARANET.API.USERNAME}'
            -
              name: api_endpoint
              value: '{$ARANET.API.ENDPOINT}'
        -
          name: 'Aranet: Sensors discovery'
          type: DEPENDENT
          key: aranet.sensor.discovery
          delay: '0'
          history: '0'
          trends: '0'
          value_type: TEXT
          description: 'Discovery for Aranet Cloud sensors'
          applications:
            -
              name: 'Zabbix raw items'
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  var input = JSON.parse(value),
                      output = [];
                  
                  input.forEach(function (sensor) {
                      sensor.metrics.forEach(function (metric) {
                          output.push(
                              {
                                  '{#ID}': sensor.id,
                                  '{#SENSOR}': sensor.name,
                                  '{#METRIC}': metric.name,
                                  '{#UNIT}': metric.unit
                              }
                          )
                      })
                  });
                  
                  return JSON.stringify(output);
            -
              type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 15m
          master_item:
            key: aranet.get_data
      discovery_rules:
        -
          name: 'Battery voltage sensors discovery'
          type: DEPENDENT
          key: aranet.battery.voltage.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: 'Battery voltage'
                formulaid: A
          description: 'Discovery for Aranet Cloud Battery voltage sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.battery.voltage["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
              trigger_prototypes:
                -
                  expression: '{max(5m)} < {$ARANET.BATT.VOLTAGE.MIN.CRIT:"{#SENSOR}"}'
                  name: '{#METRIC}: Critically low battery voltage on "{#SENSOR}" (below {$ARANET.BATT.VOLTAGE.MIN.CRIT:"{#SENSOR}"}{#UNIT} for 5m)'
                  priority: HIGH
                -
                  expression: '{max(5m)} < {$ARANET.BATT.VOLTAGE.MIN.WARN:"{#SENSOR}"}'
                  name: '{#METRIC}: Low battery voltage on "{#SENSOR}" (below {$ARANET.BATT.VOLTAGE.MIN.WARN:"{#SENSOR}"}{#UNIT} for 5m)'
                  priority: WARNING
                  dependencies:
                    -
                      name: '{#METRIC}: Critically low battery voltage on "{#SENSOR}" (below {$ARANET.BATT.VOLTAGE.MIN.CRIT:"{#SENSOR}"}{#UNIT} for 5m)'
                      expression: '{Aranet Cloud:aranet.battery.voltage["{#ID}"].max(5m)} < {$ARANET.BATT.VOLTAGE.MIN.CRIT:"{#SENSOR}"}'
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'CO2 sensors discovery'
          type: DEPENDENT
          key: aranet.co2.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: CO₂
                formulaid: A
          description: 'Discovery for Aranet Cloud CO2 sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.co2["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
              trigger_prototypes:
                -
                  expression: '{min(5m)} > {$ARANET.CO2.MAX.CRIT:"{#SENSOR}"}'
                  name: '{#METRIC}: Critically high CO2 level on "{#SENSOR}" (over {$ARANET.CO2.MAX.CRIT:"{#SENSOR}"}{#UNIT} for 5m)'
                  priority: HIGH
                -
                  expression: '{min(5m)} > {$ARANET.CO2.MAX.WARN:"{#SENSOR}"}'
                  name: '{#METRIC}: High CO2 level on "{#SENSOR}" (over {$ARANET.CO2.MAX.WARN:"{#SENSOR}"}{#UNIT} for 5m)'
                  priority: WARNING
                  dependencies:
                    -
                      name: '{#METRIC}: Critically high CO2 level on "{#SENSOR}" (over {$ARANET.CO2.MAX.CRIT:"{#SENSOR}"}{#UNIT} for 5m)'
                      expression: '{Aranet Cloud:aranet.co2["{#ID}"].min(5m)} > {$ARANET.CO2.MAX.CRIT:"{#SENSOR}"}'
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Current sensors discovery'
          type: DEPENDENT
          key: aranet.current.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Current
                formulaid: A
          description: 'Discovery for Aranet Cloud Current sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.current["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Distance sensors discovery'
          type: DEPENDENT
          key: aranet.distance.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Distance
                formulaid: A
          description: 'Discovery for Aranet Cloud Distance sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.distance["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Humidity sensors discovery'
          type: DEPENDENT
          key: aranet.humidity.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Humidity
                formulaid: A
          description: 'Discovery for Aranet Cloud humidity sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.humidity["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
              trigger_prototypes:
                -
                  expression: '{min(5m)} > {$ARANET.HUMIDITY.MAX.WARN:"{#SENSOR}"}'
                  name: '{#METRIC}: High humidity on "{#SENSOR}" (over {$ARANET.HUMIDITY.MAX.WARN:"{#SENSOR}"}{#UNIT} for 5m)'
                  priority: HIGH
                -
                  expression: '{max(5m)} < {$ARANET.HUMIDITY.MIN.WARN:"{#SENSOR}"}'
                  name: '{#METRIC}: Low humidity on "{#SENSOR}" (below {$ARANET.HUMIDITY.MIN.WARN:"{#SENSOR}"}{#UNIT} for 5m)'
                  priority: WARNING
                  dependencies:
                    -
                      name: '{#METRIC}: High humidity on "{#SENSOR}" (over {$ARANET.HUMIDITY.MAX.WARN:"{#SENSOR}"}{#UNIT} for 5m)'
                      expression: '{Aranet Cloud:aranet.humidity["{#ID}"].min(5m)} > {$ARANET.HUMIDITY.MAX.WARN:"{#SENSOR}"}'
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Illuminance sensors discovery'
          type: DEPENDENT
          key: aranet.illuminance.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Illuminance
                formulaid: A
          description: 'Discovery for Aranet Cloud Illuminance sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.illuminance["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Volumetric Water Content sensors discovery'
          type: DEPENDENT
          key: aranet.volumetric.water.content.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: 'Volumetric Water Content'
                formulaid: A
          description: 'Discovery for Aranet Cloud Volumetric Water Content sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.volumetric.water.content["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'pH sensors discovery'
          type: DEPENDENT
          key: aranet.ph.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: pH
                formulaid: A
          description: 'Discovery for Aranet Cloud pH sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.ph["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'PPFD sensors discovery'
          type: DEPENDENT
          key: aranet.ppfd.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: PPFD
                formulaid: A
          description: 'Discovery for Aranet Cloud PPFD sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.ppfd["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Atmospheric pressure sensors discovery'
          type: DEPENDENT
          key: aranet.pressure.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: 'Atmospheric Pressure'
                formulaid: A
          description: 'Discovery for Aranet Cloud atmospheric pressure sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.pressure["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'RSSI sensors discovery'
          type: DEPENDENT
          key: aranet.rssi.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: RSSI
                formulaid: A
          description: 'Discovery for Aranet Cloud RSSI sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.rssi["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Temperature sensors discovery'
          type: DEPENDENT
          key: aranet.temp.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Temperature
                formulaid: A
          description: 'Discovery for Aranet Cloud temperature sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.temp["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Voltage sensors discovery'
          type: DEPENDENT
          key: aranet.voltage.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Voltage
                formulaid: A
          description: 'Discovery for Aranet Cloud Voltage sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.voltage["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
        -
          name: 'Weight sensors discovery'
          type: DEPENDENT
          key: aranet.weight.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
                formulaid: B
              -
                macro: '{#SENSOR}'
                value: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: C
              -
                macro: '{#METRIC}'
                value: Weight
                formulaid: A
          description: 'Discovery for Aranet Cloud Weight sensors'
          item_prototypes:
            -
              name: '{#METRIC}: {#SENSOR}'
              type: DEPENDENT
              key: 'aranet.weight["{#ID}"]'
              delay: '0'
              history: 7d
              value_type: FLOAT
              units: '{#UNIT}'
              application_prototypes:
                -
                  name: '{#METRIC}'
              preprocessing:
                -
                  type: JSONPATH
                  parameters:
                    - '$[?(@.id == "{#ID}" && @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()'
              master_item:
                key: aranet.get_data
          master_item:
            key: aranet.sensor.discovery
      macros:
        -
          macro: '{$ARANET.API.ENDPOINT}'
          value: 'https://aranet.cloud/api'
        -
          macro: '{$ARANET.API.PASSWORD}'
          value: '<PUT YOUR PASSWORD>'
        -
          macro: '{$ARANET.API.SPACE_NAME}'
          value: '<PUT YOUR SPACE NAME>'
        -
          macro: '{$ARANET.API.USERNAME}'
          value: '<PUT YOUR USERNAME>'
        -
          macro: '{$ARANET.BATT.VOLTAGE.MIN.CRIT}'
          value: '2'
        -
          macro: '{$ARANET.BATT.VOLTAGE.MIN.WARN}'
          value: '1'
        -
          macro: '{$ARANET.CO2.MAX.CRIT}'
          value: '1000'
        -
          macro: '{$ARANET.CO2.MAX.WARN}'
          value: '600'
        -
          macro: '{$ARANET.HUMIDITY.MAX.WARN}'
          value: '70'
        -
          macro: '{$ARANET.HUMIDITY.MIN.WARN}'
          value: '20'
        -
          macro: '{$ARANET.LLD.FILTER.SENSOR.MATCHES}'
          value: .+
          description: 'Filter of discoverable sensors'
        -
          macro: '{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'Filter to exclude discoverable sensors'
